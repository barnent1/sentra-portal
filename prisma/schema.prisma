// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  emailVerified DateTime?
  password      String?
  name          String?
  image         String?
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  passwordResets PasswordReset[]
  projects      Project[]
  auditLogs     AuditLog[]
}

// Enum for user roles
enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Project model for managing user projects
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  ownerId     String
  status      ProjectStatus @default(ACTIVE)
  metadata    String?  // JSON field for SQLite, Json for PostgreSQL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  apiKeys     ApiKey[]
  auditLogs   AuditLog[]
  
  @@index([ownerId])
  @@index([slug])
}

// API Key model for project authentication
model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  projectId   String
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  scopes      String?  // JSON array of scopes
  rateLimit   Int      @default(1000) // requests per hour
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  auditLogs   AuditLog[]
  
  @@index([projectId])
  @@index([key])
}

// Audit Log model for tracking all system activities
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String?
  projectId   String?
  apiKeyId    String?
  metadata    String?  // JSON field
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  apiKey      ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([projectId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// Enum for project status
enum ProjectStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}
